#functions
'''
def fibo(n):
    result = []
    a,b = 0,1
    while a < n:
        result.append(a)
        a,b = b,a+b
    return result
n = int(input("enter the n value:"))
print(fibo(n))
'''

#default argument values
'''
def school(name,students = 3,msg = "please quit "):
    while True:
        ok = input(name)
        if ok in ('y','yes','Y'):
            return "please join the class"
          
        if name in('n','no','No'):
            return "please join the school "
        print(msg)

print(school("Are you a student : "))
'''
'''
def ask_ok(prompt, retries=4, reminder='Please try again!'):
    while True:
        ok = input(prompt)
        if ok in ('y', 'ye', 'yes'):
            return True
        if ok in ('n', 'no', 'nop', 'nope'):
            return False
        retries = retries - 1
        if retries < 0:
            raise ValueError('invalid user response')
        print(reminder)
'''
'''
def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
    print("-- This parrot wouldn't", action, end=' ')
    print("if you put", voltage, "volts through it.")
    print("-- Lovely plumage, the", type)
    print("-- It's", state, "!")

parrot( 100)
parrot( 10000,action = 'blurrrrrrr',state = ' a bird',type = 'flying bird')
parrot( 1000,'dead','dammmmm','bird')
parrot( 'a trillion',state = 'flying')
#parrot(voltage = 1000,'alive')

parrot("alive",voltage = 10000)

'''
'''
def cheeseshop(kind, *reason, **details):
    print("-- Do you have any", kind, "?")
    print("-- I'm sorry, we're all out of", kind)
    for arg in reason:
        print(arg)
    print("*" * 40)
    for kw in details:
        print(kw, ":", details[kw])

cheeseshop("Limburger","It's very runny, sir.",
           "It's really sorry,sir","its is really runny in our location,sir",
           shopkeeper="Michael Palin",
           client="John Cleese",
           sketch="Cheese Shop Sketch",
           location = "hyd")
'''
'''
#def standard_arg(arg):
    #print(arg)
#def pos_only_arg(arg, /):
   # print(arg)

#def kwd_only_arg(*, arg):
     #print(arg)

def combined_example(pos_only, /,*, kwd_only,standard):
     print(pos_only,kwd_only,standard)

#standard_arg(234)
#standard_arg(arg = 243)
#pos_only_arg(234)
#pos_only_arg(arg = 243)
#kwd_only_arg(243)
#kwd_only_arg(arg = 243)
#combined_example(1,2,3)
combined_example(1,kwd_only = 3,2)
'''

'''
def foo(name, **kwds):
    return 'name' in kwds

foo(1,name= 'ragasvi')
'''
'''
def foo(name,/, **kwds):
    return 'name' in kwds

print(foo(1,name= 'ragasvi',age = 23,gender = 'female'))
'''
'''
def concat(*args, sep="/"):
     return sep.join(args)

print(concat("earth", "mars", "venus"))

print(concat("x = earth", "y = mars", "z = venus", sep="."))
'''
'''
print(list(range(1,5)))
a = [1,7]
print(list(range(*a)))
'''

'''
def make_incrementor(n):
    return lambda x: x + n

f = make_incrementor(42)
print(f(2))
'''
'''
pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
pairs.sort(key=lambda pair: pair[1])

print(pairs)
'''


'''
def ask_ok(prompt, retries=4, reminder='Please try again!'):
    while True:
        ok = input(prompt)
        if ok in ('y', 'ye', 'yes'):
            return True
        if ok in ('n', 'no', 'nop', 'nope'):
            return False
        retries = retries - 1
        if retries < 0:
            raise ValueError('invalid user response')
        print(reminder)

'''


'''




