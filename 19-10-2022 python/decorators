 def div(a,b):
#     print(a/b)
#
# def smart_div(func):
#     def inner(a,b):
#         if a<b:
#             a,b = b,a
#             return func(a,b)
#     return inner

#div(2,4)
#div(6,2)
#div = smart_div(div)
#print(div(6,2))
#closures
#nested function
# def outer():
#     x= 6
#     def inner():
#         print(x)
#     inner()
# #inner()  we cant call onner outside
# outer()



# #functions are objects
# def f():
#     print('ragasvi')
#


# f()
# print(f)
# g = f
# print(g)
# g()

# def outer():
#     x = 9
#     def inner():
#         y =3
#         result = x+y
#         return result
#     return inner
#
# a = outer()
# print(a)
# #print(a.__name__)
# print(a())


# def outer():
#     msg = 'good morning'
#     def inner():
#         print(msg)
#     return inner
#
# a = outer()
# a()

# def function1():
#     print('hii i am function1')
# def function2(func):
#     print('hi i am function2 now i will call function1 ')
#     func()
# function2(function1)

# def str_upper(func):
#     def inner():
#         str1 =  func()
#         return str1.upper()
#     return inner
# @str_upper
# def print_str():
#     return 'good morning'
#
# print(print_str())
# #a = str_upper(print_str)
# #print(a())


# def smart_div(func):
#     def inner(a,b):
#         if a<b:
#             a,b = b,a
#             return func(a,b)
#     return inner
# @smart_div
# def div(a,b):
#     print(a/b)
#
# div(3,4)


#multiple decorator on single function
# def upper_d(func):
#     def inner():
#         s = func()
#         return s.upper()
#     return inner
# def split_d(func):
#     def wrapper():
#         s1 = func()
#         return s1.split()
#     return wrapper
# @split_d
# @upper_d
# def ordinary():
#     return 'how are you?'
# print(ordinary())
#id decorator contain parameter
# def outer(expr):
#     def upper_d(func):
#         def inner():
#             return func() + expr
#         return inner
#     return upper_d
# @outer(' ragasvi')
# def ordinary():
#     return 'good morning'
# print(ordinary())

# #multiple functions
# def div_decorator(func):
#     def inner(*args):
#         list1 =[]
#         list1 = args[1:]
#         for i in list1:
#             if i == 0:
#                 return 'give proper input'
#         return func(*args)
#     return inner
# @div_decorator
# def div1(a,b):
#     return a/b
# @div_decorator
# def div2(a,b,c):
#     return a/b/c
#
# print(div1(1,2))
# print(div2(3,4,9))
# import functools
# def str_upper(func):
#     @functools.wraps(func)
#     def inner():
#         str1 =  func()
#         return str1.upper()
#     return inner
# @str_upper
# def print_str():
#     return 'good morning'

#print(print_str())
#a = str_upper(print_str)
#print(a())
#print(print_str.__name__)

# #decorators on class
# def check_name(method):
#     def inner(s):
#         if s.name == 'tiger':
#             print('this is a animal name')
#         else:
#             method(s)
#     return inner
# class animal:
#     def __init__(self,name):
#         self.name = name
#
#     @check_name
#     def print_name(self):
#         print("entered animal animal is :",self.name)
#
# a = animal('lion')
# a.print_name()

#class as decorator
# class student:
#     def __init__(self,name):
#         self.name = name
#
#     def __call__(self):
#         print('student name is ',self.name)
#
# a = student('ragasvi')
# a()
